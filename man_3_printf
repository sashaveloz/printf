.TH _printf 3 "July 20, 2020" "printf man page"

.SH NAME
_printf

.SH SYNOPSIS

#include <stdio.h>
int _printf(const char *format, ...);


.SH DESCRIPTION

.PP
_printf function produce an output according to a format.

.PP
.B Format specifications
.PP 
When printf processes its arguments, it starts wrinting the characters
it finds in the first argument, one by one. When it finds a percent it knows it
has a format specification. It goes to the next argument and uses its value, 
printing it according to that format specification.
.PP
(See a example for this in the second example in EXAMPLES).

.PP
When we want to print the content of variables, we need a format specifier,
and an argument. 

.B Percent

.PP
Every format specification starts with a percent sign and ends with a 
letter. The letters are chosen to have some mnemonic meaning.

.B Here is a partial list:

.PP
%c print a single character.
.PP
%d print a decimal (base 10) number.
.PP
%e print an exponential floating-point number.
.PP
%f print a floating-point number.
.PP
%g print a general-format floating-point number.
.PP
%i print an integer in base 10.
.PP
%o print a number in octal (base 8).
.PP
%s print a string of characters.
.PP
%u print an unsigned decimal (base 10) number. 
.PP
%x print a number in hexidecimal (base 16). 
.PP
%% print a percent sign (\\% also works).

.B Special characters

.PP
To identify the start and the end of a string we use double-quote (").
.PP
If we actually want to print a double quote, that is a special character,
in C, we need to use a backslash (\) as a escape character, to change
the meaning of the next character after it.
.PP
Thus, to print a double-quote you type in backslash double-quote (\\").

.B Here is a partial list:

.PP
\\ escape the next character.
.PP
\\\\ print a backslash.
.PP
" start or end of a string
.PP
\\" print a double-quote.
.PP
\ ' start or end a character constant.
.PP
\\' print a single quote.
.PP
% start a format specification.
.PP
\\% print a percent sign.


.B Alternately special characters

.PP
We also have characters that normally print as you would expect, but when
you add a backslash they become special. An example of that, is newline
character (\\n). Thus, invoking the alternative meaning of n, which is newline.

.B Here is a partial list:

.PP
\\a audible alert (bell).
.PP
\\b backspace.
.PP
\\f form feed.
.PP
\\n newline (linefeed).
.PP
\\r carriage return.
.PP
\\t tab.
.PP
\\v vertical tab.


.SH RETURN VALUE
.PP
Upon successful return, this function returns the number of characters printed,
excluding the NULL byte used to end output to strings. If it's NULL or if
the function encounters any errors, a negative value is returned.

.SH EXAMPLES 
For example:
.PP
int age;
.PP
age = 25;
.PP
printf ( "I am %d years old\\n", age );
.PP
Output = "I am 25 years old"
.PP
Or:
.PP
int x = 5, y = 10;
.PP
printf ("x is %d and y is %d\\n", x, y );
.PP
Output = "x is 5 and y is 10" 

.SH SEE ALSO
.PP
See the list of special characters here:
.PP
http://mywiki.wooledge.org/BashGuide/SpecialCharacters

.SH AUTHORS

Valentina Castillo Gonzalez, Sasha Martina Veloz.
